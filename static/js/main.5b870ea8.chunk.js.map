{"version":3,"sources":["Components/Navbar.js","Context/SongsContext.js","Components/FormSearch.js","Components/Spinner.js","Components/SongsList.js","Components/SongLyrics.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","SongsContext","createContext","SongsContextProvider","props","useState","songs","setSong","tracks","setTrack","useEffect","axios","get","then","res","data","message","body","track_list","catch","err","console","log","Provider","value","Search","document","getElementsByClassName","innerHTML","children","FormSearch","useContext","onSubmit","e","preventDefault","required","onChange","target","typr","placeholder","Spinner","SongsList","song","length","map","key","track","track_id","artist_name","track_name","album_name","to","SongLyrics","trackId","match","params","Track_id","find","lyrics","setLyrics","undefined","Object","keys","lyrics_body","album_id","updated_time","App","exact","path","render","Component","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b870ea8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <nav className='w-100'>\r\n            <h1 className='text-center'>Lyrics Finder</h1>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React , {createContext , useState , useEffect} from 'react'\r\nimport axios from 'axios'\r\nexport const SongsContext = createContext();\r\nconst SongsContextProvider = (props) =>{\r\n    //state To Store TopTen Musinc\r\n    const [songs , setSong] = useState([]);\r\n    //state To store input value from search\r\n    const [tracks , setTrack] = useState('');\r\n    //Search Function --> run this function on submit\r\n    const Search = () => {\r\n        const ApiKey = '29ee208739fff38cbb446a39c805b8c3';\r\n        axios.get(`https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${tracks}&page_size=10&page=1&s_track_rating=desc&apikey=${ApiKey}`)\r\n            .then(res=>{\r\n                setSong(res.data.message.body.track_list);\r\n            });\r\n         document.getElementsByClassName('top')[0].innerHTML = 'Search Result';\r\n    }\r\n    //call tracks api to get topTen tracks when page loaded then store them in array\r\n    useEffect(()=>{\r\n        const ApiKey = '29ee208739fff38cbb446a39c805b8c3';\r\n        axios.get(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${ApiKey}`)\r\n        .then(res=>{\r\n            setSong(res.data.message.body.track_list);\r\n        })\r\n        .catch(err => console.log(err));\r\n    },[]);\r\n    return(\r\n        <SongsContext.Provider value={{songs , setSong , tracks ,setTrack  , Search}}>\r\n            {props.children}\r\n        </SongsContext.Provider>\r\n    )\r\n}\r\nexport default SongsContextProvider","import React , {useContext} from 'react';\r\nimport { SongsContext } from '../Context/SongsContext';\r\n\r\nconst FormSearch = () =>{\r\n    const {setSong , setTrack , Search} = useContext(SongsContext);\r\n    const HandelInput = (e) => {\r\n        setTrack(e.target.value);\r\n    }\r\n    const HandelSupmit = (e) =>{\r\n        e.preventDefault();\r\n        setSong('');\r\n        Search();\r\n    }\r\n    return(\r\n        <div className='search d-flex justify-content-center align-items-center'>\r\n            <div className='container'>\r\n                <form onSubmit={HandelSupmit} className='form-group d-flex justify-content-center align-items-center flex-column'>\r\n                    <h1><i className=\"fa fa-music\"></i>Search For A Song</h1>\r\n                    <h5>Get The Lyrics For any Track</h5>\r\n                    <div className='w-100 d-flex justify-content-center align-items-center'>\r\n                        <input required onChange={HandelInput} className='form-control' typr='text' placeholder='Please Enter Your Song' />\r\n                        <button className='btn btn-primary'>Search</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default FormSearch","import React from 'react'\r\nimport '../styles/App.css'\r\nconst Spinner = () => {\r\n    return(\r\n        <div className=\"spinner\">\r\n            <div className=\"rect1\"></div>\r\n            <div className=\"rect2\"></div>\r\n            <div className=\"rect3\"></div>\r\n            <div className=\"rect4\"></div>\r\n            <div className=\"rect5\"></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Spinner","import React , {useContext} from 'react';\r\nimport { SongsContext } from '../Context/SongsContext';\r\nimport {Link} from 'react-router-dom'\r\nimport Spinner from './Spinner';\r\nconst SongsList = () =>{\r\n    //Get Songs from Context\r\n    const {songs} = useContext(SongsContext);\r\n    //Map Them if there is songs \r\n    const song = songs.length ? (\r\n        songs.map(song => {\r\n            return(\r\n                <div className='col-12 col-md-6' key={song.track.track_id}>\r\n                    <div className='track'>\r\n                        <h6>{song.track.artist_name}</h6>\r\n                        <p><span><i className=\"fas fa-play\"></i>Track: </span>{song.track.track_name}</p>\r\n                        <p><span><i className=\"fas fa-compact-disc\"></i>Album: </span>{song.track.album_name}</p>\r\n                        <Link to={'/' + song.track.track_id}><button>View Lyric <i className=\"fa fa-chevron-right\"></i></button></Link>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <Spinner/>\r\n    )\r\n    return(\r\n        <div className='SongsList'>\r\n                <div className='container'>\r\n                <h2 className='text-center top'>Top 10 Tracks</h2>\r\n                    <div className='row'>\r\n                        {song}\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongsList","import React , {useContext,useEffect , useState} from 'react';\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport { SongsContext } from '../Context/SongsContext';\r\nimport Spinner from './Spinner';\r\n\r\nconst SongLyrics = (props) =>{\r\n    //Get Songs from Context\r\n    const {songs} = useContext(SongsContext);\r\n    //Get track ID\r\n    const trackId = props.match.params.Track_id;\r\n    // Get Specific track from songs list \r\n    const track = songs.find(song => song.track.track_id == trackId);\r\n    // create state to store lyrics of track\r\n    const [lyrics , setLyrics] = useState([])\r\n    //useEffect method to call api and get lyrics of track then store it in setlyrics\r\n    useEffect(()=>{\r\n        const ApiKey = '29ee208739fff38cbb446a39c805b8c3';\r\n        axios.get(`https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=${trackId}&apikey=${ApiKey}`)\r\n            .then(res=>{\r\n                setLyrics(res.data.message.body.lyrics)\r\n            })\r\n    },[]);\r\n    //Check if lyrics or track founded or not \r\n    if(lyrics === undefined  || track === undefined || Object.keys(track).length === 0 || Object.keys(lyrics).length === 0 ) {\r\n        return <Spinner />\r\n    } else {\r\n        return(\r\n            <div className='Track-Lyrics d-flex justify-content-center align-items-center' >\r\n                <div className='container'>\r\n                    <div className='Lyrics'>\r\n                        <Link to='/'><button><i className=\"fa fa-chevron-left\"></i> Back</button></Link>\r\n                        <h5>Artist Name : {track.track.artist_name}</h5>\r\n                        <h6>Track Name : {track.track.track_name}</h6>\r\n                        <h6>Album Name : {track.track.album_name}</h6>\r\n                        <p>{lyrics.lyrics_body}</p>\r\n                        <p><span>Album ID: </span>{track.track.album_id}</p>\r\n                        <p><span>Relesed Date: </span>{track.track.updated_time}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SongLyrics;","import React , {Component} from 'react';\nimport './styles/App.css'\nimport {BrowserRouter , Route , Switch} from 'react-router-dom'\nimport Navbar from './Components/Navbar'\nimport FormSearch from './Components/FormSearch'\nimport SongsList from './Components/SongsList'\nimport SongsContextProvider from './Context/SongsContext'\nimport SongLyrics from './Components/SongLyrics';\nclass App extends Component{\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App d-flex justify-content-center align-items-center flex-column\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/'>\n              <SongsContextProvider>\n                <FormSearch />\n                <SongsList/>\n              </SongsContextProvider>\n            </Route>\n            <Route path='/:Track_id' render={(props) => <SongsContextProvider> <SongLyrics {...props} /> </SongsContextProvider>} />\n          </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}